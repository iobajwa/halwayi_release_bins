<?xml version="1.0" encoding="utf-8"?>

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


  <!--
  ************************************************************************************************************************
                                                     Global Settings
  ************************************************************************************************************************
  -->

  

  <!-- Global Properties-->
  <PropertyGroup>
    <ProjectName>Sample Project</ProjectName>     <!-- must be declared -->
  </PropertyGroup>







  <!--
  ************************************************************************************************************************
                                                      Variant Settings
  ************************************************************************************************************************
  -->

  <ItemGroup>
    <!-- Supports unlimited number of variants. -->
    <Variants Include = "My Fancy Variant">
      <!--<Switch>__USER_DESIRED_SWITCH__</Switch>-->
      <!-- 
          This is defined as a preprocessor switch, if none is provided, the halwayi automatically
          creates one, for this case, it would be: __MY_FANCY_VARIANT__
      -->

      <CPU>PIC32MX795F512L</CPU>
      <!--<CPUMake>MCHP</CPUMake>-->
      <ToolChain>C32</ToolChain>
      <!-- 
          CPU can be common for both Release and Tests. In case, it is different use TestCPU,
          ReleaseCPU instead.
          But this feature, however, should be used with extereme caution such that the two CPUs 
          must ideally should only vary for memory sizes and not performance/ISA.

          Providing some CPU information is must, but Make and ToolChain are optional.
          The halwayi automatically figures out the make from CPU and uses the default tool chains:
            PIC12/16/18 parts: xc8
            PIC32: xc32
          Supported tool chains are: xc8, xc32, c18, c32
      -->


      <TestDefines>$(TestDefinesGlobal)</TestDefines>
      <ReleaseDefines>$(ReleaseDefinesGlobal)</ReleaseDefines>
      <!-- 
          TestDefines are used only during building tests
          
          ReleaseDefines are used for building releases. In the Halwayi paradigm, releases are called
          'features'. A feature is a exectuble, stand-alone version of the variant which is usually
          centerred around a given 'feature' of the product. For example, a feature named 'view'
          would contain concrete (final) implementation of view and dummy (or real) implementations of
          its dependencies. So features are powerful packages which are helpful to release a given bulky
          feature of the project.
          
          The default ('final') feature means everything should be bundeled together to create the
          final product.
      -->

      <NativeLinkerArgs>--funky=value;</NativeLinkerArgs>
      <!-- 
          Hanji, linker can be given custom arguments. These are appended at the end of the default 
          ones.
      -->


      <Recipes>recipes</Recipes>
      <!-- 
          Recipes are powerful scripting feature which comes in handy during building releases. Recipes
          can basically 'plug in' to the release process and do some very pretty automation magic: 
          creating auto_code files for segments, adc, datastore, view, etc., appending new paths.

          This property defines the recipes root for this variant. Since variants may or may not have 
          huge variations across their hardware/software components, so it makes sense that each variant
          to have it's own recipe folders. In such a scenario, all variants will also share some 'common'
          recipes (present int $(RecipeRoot)). The user can provide same folders for each variant if their is
          no such complexity involved.

          During release building, the halwayi automatically searches all recipe files (files ending with
          .recipe extension) and loads and exectues them. There are serveral extension points left out
          in the build process where the recipes can extend:
            _BeforeSetup, _BeforeBuild, _AfterBuild
            _BeforeClean, _BeforeCleanGhost, _AfterCleanGhost, _BeforeCleanNative, _AfterCleanNative, _AfterClean

          The value for this property (like every other path) is (by default) assumed relative to the 
          $(ProjectRoot).

          In case this property is not provided, the default ('$(RecipesRoot)') is used.
      -->


      <ToolScripts>scripts\config</ToolScripts>
      <!-- 
          Usually the tools invoked during release building require some kind of configuration files (.yaml :D),
          this property points to the folder for these files for the current variant.

          Every tool comes with it's own recipe. When it is unpacked for the project, it's installer automatically
          installs it's recipes into the $(RecipeRoot). These recipes are then used by halwayi to build the 
          release. Most of the time the tool automatically searches for it's required configuration file (using
          some kind of naming convention, eg. adc_*.yaml for adc tool) and loads it.

          This way, we can concentrate over building our product code without wasting time and effort in 
          setting up a working environment.
       -->



      <!--  
          One of the most powerfull features of halwayi is how little configuration it requires and yet how 
          flexible it is.
          Because halwayi centres around writing platform independent code, there are always two 'kinds' of
          exectuables being built: ghost and native. The ghost executables can run on host (development) cpus
          and hence help keeping a tight TDD cycle. The native executables can run on native platforms or
          in simulators. Most of the time, the development keeps on going in ghost, and using CI server,
          upon every comit, the same tests can be built for natives and reports generated.
          To pull this (and some tedious cases) off, halwayi uses a very elaborate folder search mechanism.
          At a given time only a single executable is being built (either ghost or native), so here is the
          path include priority list:

            - Test Folder             (default $(ArtifactRoot)\tests\$Namespace\$test)
            - All Test Folders                              (TestFolders)
            - User provided Native/Ghost Support folder     (NativeSupportFolders, GhostSupportFolders)
            - Halwayi provided Native/Ghost Support Folder
            - User provided Common Support Folder           (SupportFolders)
            - Halwayi provided Common Support Folders       
            - User provided Native/Ghost Source Folder      (NativeSourceFolders, GhostSourceFolders)
            - Source Folders                                (SourceFolders)
            - Include Folders                               (IncludeFolders)


          Context:
            TestFolders:      These folders are looked up for test source files.
            Support Folders:  These folders are meant to contain common helpful code used by tests
            Source Folders:   These folders contain production code.
            Include Folders:  All left out..


          Most application won't require such elaborate paths.. But these were required while building halwayi
          using halwayi itself. So we've decided to keep them.

          Also, paths can be provided using globs. Now globs in halwayi are really powerful, e.g.:
            path\*\*          will include EVERY path (using deep search)
            path\*            will include EVERY path (using shallow search- only top level paths are included)
            -path\something   will remove the "path\something" path from the prepared list so far.


          In case there is no 'final.feature' file provided in the $FeatureRoot, then the halwayi will attempt
          to build package an output executable by using every source file it can find inside the %(SourceFolders).
          Otherwise, the user can provide it's "custom files" that (s)he may require.
      -->
      <TestFolders>
        code\tests\Variant c32;
        code\tests\Common\*\*;
      </TestFolders>
      <GhostSupportFolders>code\tests\Support</GhostSupportFolders>
      <!--<NativeSupportFolders></NativeSupportFolders>-->
      <SupportFolders>code\tests\Support</SupportFolders>
      <SourceFolders>code\source\Variant c32</SourceFolders>
      <GhostSourceFolders>code\source\common\ghost</GhostSourceFolders>
      <NativeSourceFolders>code\source\common\native</NativeSourceFolders>
      <!--<IncludeFolders></IncludeFolders>-->

      

      <!-- 
          In future we might support following properties as well (if such a need ever arrives) 
      -->
      <!--<CompilerArgs></CompilerArgs>
      <LinkerArgs></LinkerArgs>
      <CompilerDirectives></CompilerDirectives>-->
      
    </Variants>


  </ItemGroup>

</Project>

